{"ast":null,"code":"const client = new StompJs.Client({\n  brokerURL: 'ws://localhost:8080:/ws',\n  debug: function (str) {\n    console.log(str);\n  },\n  reconnectDelay: 5000,\n  heartbeatIncoming: 4000,\n  heartbeatOutgoing: 4000\n});\n\nclient.onConnect = function (frame) {\n  // Do something, all subscribes must be done is this callback\n  // This is needed because this will be executed after a (re)connect\n  console.log(frame);\n};\n\nclient.onStompError = function (frame) {\n  // Will be invoked in case of error encountered at Broker\n  // Bad login/passcode typically will cause an error\n  // Complaint brokers will set `message` header with a brief message. Body may contain details.\n  // Compliant brokers will terminate the connection after any error\n  console.log('Broker reported error: ' + frame.headers['message']);\n  console.log('Additional details: ' + frame.body);\n};","map":{"version":3,"sources":["/home/mitchell/party-q/frontend/src/pages/WS/WS.js"],"names":["client","StompJs","Client","brokerURL","debug","str","console","log","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","onStompError","headers","body"],"mappings":"AACA,MAAMA,MAAM,GAAG,IAAIC,OAAO,CAACC,MAAZ,CAAmB;AAC9BC,EAAAA,SAAS,EAAE,yBADmB;AAE9BC,EAAAA,KAAK,EAAE,UAASC,GAAT,EAAc;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,GAJ6B;AAK9BG,EAAAA,cAAc,EAAE,IALc;AAM9BC,EAAAA,iBAAiB,EAAE,IANW;AAO9BC,EAAAA,iBAAiB,EAAE;AAPW,CAAnB,CAAf;;AAUAV,MAAM,CAACW,SAAP,GAAmB,UAAUC,KAAV,EAAiB;AAChC;AACA;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACH,CAJD;;AAMAZ,MAAM,CAACa,YAAP,GAAsB,UAAUD,KAAV,EAAiB;AACnC;AACA;AACA;AACA;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BK,KAAK,CAACE,OAAN,CAAc,SAAd,CAAxC;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBK,KAAK,CAACG,IAA3C;AACH,CAPD","sourcesContent":["\nconst client = new StompJs.Client({\n    brokerURL: 'ws://localhost:8080:/ws',\n    debug: function(str) {\n        console.log(str)\n    },\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n});\n\nclient.onConnect = function (frame) {\n    // Do something, all subscribes must be done is this callback\n    // This is needed because this will be executed after a (re)connect\n    console.log(frame)\n};\n  \nclient.onStompError = function (frame) {\n    // Will be invoked in case of error encountered at Broker\n    // Bad login/passcode typically will cause an error\n    // Complaint brokers will set `message` header with a brief message. Body may contain details.\n    // Compliant brokers will terminate the connection after any error\n    console.log('Broker reported error: ' + frame.headers['message']);\n    console.log('Additional details: ' + frame.body);\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/party-q/frontend/src/pages/WS/WS.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport SockJsClient from 'react-stomp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nconst WS = () => {\n  _s();\n\n  const [message, setMessage] = useState('You server message here.');\n\n  let onConnected = () => {\n    console.log(\"Connected!!\");\n  };\n\n  let onMessageReceived = msg => {\n    setMessage(msg.message);\n  };\n\n  const {\n    value: accessCode,\n    bind: bindAccessCode,\n    reset: resetAccessCode\n  } = useInput('', \"number\");\n  const [error, setError] = useState();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    partyAdapter.find({\n      accessCode\n    }).then(party => party.id).then(partyId => partyAdapter.addCurrentUser(partyId)).then(() => window.location = \"/party\").catch(error => {\n      if (is404(error)) {\n        setError(\"Invalid access code\");\n      } else {\n        setError(error.response.data.message);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SockJsClient, {\n      url: SOCKET_URL,\n      topics: ['/topic/party-updates'],\n      onConnect: onConnected,\n      onDisconnect: console.log(\"Disconnected!\"),\n      onMessage: msg => onMessageReceived(msg),\n      debug: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"has-text-light with-space-on-right\",\n        children: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ...bindAccessCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WS, \"V3aiVtlANEyamrW8y3j8ImZH0Vk=\", true);\n\n_c = WS;\nexport default WS;\n\nvar _c;\n\n$RefreshReg$(_c, \"WS\");","map":{"version":3,"sources":["/home/mitchell/party-q/frontend/src/pages/WS/WS.js"],"names":["React","useState","SockJsClient","SOCKET_URL","WS","message","setMessage","onConnected","console","log","onMessageReceived","msg","value","accessCode","bind","bindAccessCode","reset","resetAccessCode","useInput","error","setError","handleSubmit","event","preventDefault","partyAdapter","find","then","party","id","partyId","addCurrentUser","window","location","catch","is404","response","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,aAAzB;;AAEA,MAAMC,UAAU,GAAG,0BAAnB;;AAEA,MAAMC,EAAE,GAAG,MAAM;AAAA;;AACf,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,0BAAD,CAAtC;;AAEA,MAAIM,WAAW,GAAG,MAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAFD;;AAIA,MAAIC,iBAAiB,GAAIC,GAAD,IAAS;AAC/BL,IAAAA,UAAU,CAACK,GAAG,CAACN,OAAL,CAAV;AACD,GAFD;;AAIA,QAAM;AAAEO,IAAAA,KAAK,EAAEC,UAAT;AAAqBC,IAAAA,IAAI,EAAEC,cAA3B;AAA2CC,IAAAA,KAAK,EAAEC;AAAlD,MAAsEC,QAAQ,CAAC,EAAD,EAAM,QAAN,CAApF;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,EAAlC;;AAEA,QAAMoB,YAAY,GAAGC,KAAK,IAAI;AAC1BA,IAAAA,KAAK,CAACC,cAAN;AAEAC,IAAAA,YAAY,CACPC,IADL,CACU;AAACZ,MAAAA;AAAD,KADV,EAEKa,IAFL,CAEUC,KAAK,IAAIA,KAAK,CAACC,EAFzB,EAGKF,IAHL,CAGUG,OAAO,IAAIL,YAAY,CAACM,cAAb,CAA4BD,OAA5B,CAHrB,EAIKH,IAJL,CAIU,MAAMK,MAAM,CAACC,QAAP,GAAkB,QAJlC,EAKKC,KALL,CAKWd,KAAK,IAAI;AACZ,UAAGe,KAAK,CAACf,KAAD,CAAR,EAAiB;AACbC,QAAAA,QAAQ,CAAC,qBAAD,CAAR;AACH,OAFD,MAEO;AACHA,QAAAA,QAAQ,CAACD,KAAK,CAACgB,QAAN,CAAeC,IAAf,CAAoB/B,OAArB,CAAR;AACH;AACJ,KAXL;AAYH,GAfD;;AAiBA,sBACE;AAAA,4BACE,QAAC,YAAD;AACE,MAAA,GAAG,EAAEF,UADP;AAEE,MAAA,MAAM,EAAE,CAAC,sBAAD,CAFV;AAGE,MAAA,SAAS,EAAEI,WAHb;AAIE,MAAA,YAAY,EAAEC,OAAO,CAACC,GAAR,CAAY,eAAZ,CAJhB;AAKE,MAAA,SAAS,EAAEE,GAAG,IAAID,iBAAiB,CAACC,GAAD,CALrC;AAME,MAAA,KAAK,EAAE;AANT;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAA,gBAAMN;AAAN;AAAA;AAAA;AAAA;AAAA,YATF,eAWI;AAAM,MAAA,QAAQ,EAAEgB,YAAhB;AAAA,8BACE;AAAO,QAAA,SAAS,EAAC,oCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAA,WAAuBN;AAAvB;AAAA;AAAA;AAAA;AAAA,cAJF,eAME;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CArDD;;GAAMX,E;;KAAAA,E;AAuDN,eAAeA,EAAf","sourcesContent":["import React, { useState } from 'react';\nimport SockJsClient from 'react-stomp';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nconst WS = () => {\n  const [message, setMessage] = useState('You server message here.');\n\n  let onConnected = () => {\n    console.log(\"Connected!!\")\n  }\n\n  let onMessageReceived = (msg) => {\n    setMessage(msg.message);\n  }\n\n  const { value: accessCode, bind: bindAccessCode, reset: resetAccessCode } = useInput('',  \"number\");\n  const [error, setError] = useState();\n  \n  const handleSubmit = event => {\n      event.preventDefault();\n\n      partyAdapter\n          .find({accessCode})\n          .then(party => party.id)\n          .then(partyId => partyAdapter.addCurrentUser(partyId))\n          .then(() => window.location = \"/party\")\n          .catch(error => {\n              if(is404(error)) {\n                  setError(\"Invalid access code\");\n              } else {\n                  setError(error.response.data.message);\n              }\n          })\n  }\n\n  return (\n    <div>\n      <SockJsClient\n        url={SOCKET_URL}\n        topics={['/topic/party-updates']}\n        onConnect={onConnected}\n        onDisconnect={console.log(\"Disconnected!\")}\n        onMessage={msg => onMessageReceived(msg)}\n        debug={false}\n      />\n      <div>{message}</div>\n\n        <form onSubmit={handleSubmit}>\n          <label className=\"has-text-light with-space-on-right\">\n            Message:\n          </label> \n          <input type=\"text\" {...bindAccessCode} />\n\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n    </div>\n  );\n}\n\nexport default WS;"]},"metadata":{},"sourceType":"module"}
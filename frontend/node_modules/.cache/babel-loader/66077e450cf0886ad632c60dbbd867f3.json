{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useInput = initialValue => {\n  _s();\n\n  const [value, setValue] = useState(initialValue, regex);\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: event => {\n        const handleChange = e => {\n          const {\n            value\n          } = e.target.value;\n          const regex = /^[0-9\\b]+$/,\n                val = e.target.val;\n          if (e.target.value === '' || regex.test(e.target.value)) setEntryCode({\n            value: e.target.value\n          });\n        };\n\n        setValue(event.target.value);\n      }\n    }\n  };\n};\n\n_s(useInput, \"L08zUdRTae9t+nWvf9xbU6NcRrM=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/mitchell/party-q/frontend/src/hooks/useInput.js"],"names":["useState","useInput","initialValue","value","setValue","regex","reset","bind","onChange","event","handleChange","e","target","val","test","setEntryCode"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAGC,YAAY,IAAI;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAACE,YAAD,EAAeG,KAAf,CAAlC;AAEA,SAAO;AACLF,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLE,IAAAA,KAAK,EAAE,MAAMF,QAAQ,CAAC,EAAD,CAHhB;AAILG,IAAAA,IAAI,EAAE;AACJJ,MAAAA,KADI;AAEJK,MAAAA,QAAQ,EAAEC,KAAK,IAAI;AAEjB,cAAMC,YAAY,GAAGC,CAAC,IAAI;AAEtB,gBAAM;AAAER,YAAAA;AAAF,cAAYQ,CAAC,CAACC,MAAF,CAAST,KAA3B;AACA,gBAAME,KAAK,GAAG,YAAd;AAAA,gBAA4BQ,GAAG,GAAGF,CAAC,CAACC,MAAF,CAASC,GAA3C;AAEA,cAAIF,CAAC,CAACC,MAAF,CAAST,KAAT,KAAmB,EAAnB,IAAyBE,KAAK,CAACS,IAAN,CAAWH,CAAC,CAACC,MAAF,CAAST,KAApB,CAA7B,EACIY,YAAY,CAAC;AAACZ,YAAAA,KAAK,EAAEQ,CAAC,CAACC,MAAF,CAAST;AAAjB,WAAD,CAAZ;AACP,SAPD;;AAQAC,QAAAA,QAAQ,CAACK,KAAK,CAACG,MAAN,CAAaT,KAAd,CAAR;AACD;AAbG;AAJD,GAAP;AAoBD,CAvBD;;GAAMF,Q;;AAyBN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useInput = initialValue => {\n  const [value, setValue] = useState(initialValue, regex);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: event => {\n\n        const handleChange = e => {\n\n            const { value } = e.target.value;\n            const regex = /^[0-9\\b]+$/, val = e.target.val;\n    \n            if (e.target.value === '' || regex.test(e.target.value)) \n                setEntryCode({value: e.target.value})\n        }\n        setValue(event.target.value);\n      }\n    }\n  };\n};\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/party-q/frontend/src/pages/WS/WS.js\",\n    _s = $RefreshSig$();\n\nimport { apiHost } from 'config';\nimport React, { useState } from 'react';\nimport SockJsClient from 'react-stomp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WS = () => {\n  _s();\n\n  const [connected, setConnected] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(SockJsClient, {\n      url: `${apiHost}/ws`,\n      topics: ['/topics/party-updates'],\n      ref: client => this.clientRef = client,\n      onMessage: console.log,\n      onConnect: () => setConnected(true),\n      onDisconnect: () => setConnected(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WS, \"LY4Aeu5UcHHYjglHE9bCC5TH818=\");\n\n_c = WS;\nexport default WS;\n\nvar _c;\n\n$RefreshReg$(_c, \"WS\");","map":{"version":3,"sources":["/home/mitchell/party-q/frontend/src/pages/WS/WS.js"],"names":["apiHost","React","useState","SockJsClient","WS","connected","setConnected","client","clientRef","console","log"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,aAAzB;;;AAEA,MAAMC,EAAE,GAAG,MAAM;AAAA;;AAEb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AAEA,sBACI;AAAA,2BACI,QAAC,YAAD;AACI,MAAA,GAAG,EAAG,GAAEF,OAAQ,KADpB;AAEI,MAAA,MAAM,EAAE,CAAC,uBAAD,CAFZ;AAGI,MAAA,GAAG,EAAEO,MAAM,IAAI,KAAKC,SAAL,GAAiBD,MAHpC;AAII,MAAA,SAAS,EAAEE,OAAO,CAACC,GAJvB;AAKI,MAAA,SAAS,EAAE,MAAMJ,YAAY,CAAC,IAAD,CALjC;AAMI,MAAA,YAAY,EAAE,MAAMA,YAAY,CAAC,KAAD;AANpC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAfD;;GAAMF,E;;KAAAA,E;AAiBN,eAAeA,EAAf","sourcesContent":["import { apiHost } from 'config';\nimport React, { useState } from 'react';\nimport SockJsClient from 'react-stomp';\n\nconst WS = () => {\n\n    const [connected, setConnected] = useState(false);\n\n    return (\n        <div>\n            <SockJsClient \n                url={`${apiHost}/ws`} \n                topics={['/topics/party-updates']}\n                ref={client => this.clientRef = client}\n                onMessage={console.log}\n                onConnect={() => setConnected(true)}\n                onDisconnect={() => setConnected(false)} />\n        </div>\n    );\n}\n \nexport default WS;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useLocation } from 'react-router-dom';\nimport crudClient from 'api/crudClient';\nimport spotifyClient from 'api/spotifyClient';\nimport qs from 'qs';\n\nconst useToken = () => {\n  _s();\n\n  const location = useLocation();\n  const token = qs.parse(location.search, {\n    ignoreQueryPrefix: true\n  }).access_token;\n  const oldToken = localStorage.getItem('jwt');\n\n  if (!oldToken || oldToken !== token) {\n    updateToken(token);\n  }\n\n  return token;\n};\n\n_s(useToken, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\nconst updateToken = token => {\n  const id = crudClient('members').partialUpdate(id, {\n    token\n  }).then(console.log).catch(console.log);\n  localStorage.setItem('token', oldToken);\n};\n\nexport default useToken;","map":{"version":3,"sources":["/home/mitchell/party-q/frontend/src/hooks/useToken.js"],"names":["useLocation","crudClient","spotifyClient","qs","useToken","location","token","parse","search","ignoreQueryPrefix","access_token","oldToken","localStorage","getItem","updateToken","id","partialUpdate","then","console","log","catch","setItem"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,EAAP,MAAe,IAAf;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,QAAMM,KAAK,GAAGH,EAAE,CAACI,KAAH,CAASF,QAAQ,CAACG,MAAlB,EAA0B;AAAEC,IAAAA,iBAAiB,EAAE;AAArB,GAA1B,EAAuDC,YAArE;AACA,QAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAjB;;AAEA,MAAG,CAACF,QAAD,IAAaA,QAAQ,KAAKL,KAA7B,EAAoC;AAChCQ,IAAAA,WAAW,CAACR,KAAD,CAAX;AACH;;AAED,SAAOA,KAAP;AACH,CAXD;;GAAMF,Q;UACeJ,W;;;AAYrB,MAAMc,WAAW,GAAGR,KAAK,IAAI;AACzB,QAAMS,EAAE,GACRd,UAAU,CAAC,SAAD,CAAV,CAAsBe,aAAtB,CAAoCD,EAApC,EAAwC;AAACT,IAAAA;AAAD,GAAxC,EAAiDW,IAAjD,CAAsDC,OAAO,CAACC,GAA9D,EAAmEC,KAAnE,CAAyEF,OAAO,CAACC,GAAjF,CADA;AAEAP,EAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BV,QAA9B;AACH,CAJD;;AAMA,eAAeP,QAAf","sourcesContent":["import { useLocation } from 'react-router-dom';\n\nimport crudClient from 'api/crudClient';\nimport spotifyClient from 'api/spotifyClient';\nimport qs from 'qs';\n\nconst useToken = () => {\n    const location = useLocation();\n\n    const token = qs.parse(location.search, { ignoreQueryPrefix: true }).access_token;\n    const oldToken = localStorage.getItem('jwt');\n    \n    if(!oldToken || oldToken !== token) {\n        updateToken(token);\n    }\n\n    return token;\n};\n\nconst updateToken = token => {\n    const id = \n    crudClient('members').partialUpdate(id, {token}).then(console.log).catch(console.log);\n    localStorage.setItem('token', oldToken);\n}\n\nexport default useToken;\n  "]},"metadata":{},"sourceType":"module"}
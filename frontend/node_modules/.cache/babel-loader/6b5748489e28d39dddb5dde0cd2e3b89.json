{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nconst useInput = (initialValue, type) => {\n  _s();\n\n  const [value, setValue] = useState(initialValue);\n  const [regex, setRegex] = useState();\n  useEffect(() => {\n    if (type && type === \"number\") {\n      setRegex(/^[0-9\\b]+$/);\n    }\n  }, [type]);\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: e => {\n        const {\n          value\n        } = e.target.value;\n        console.log(value);\n\n        if (value === '' || !regex || regex.test(value)) {\n          setValue(value);\n        }\n      }\n    }\n  };\n};\n\n_s(useInput, \"rWLFAvFyrQBC5GWMLJdwEmfh44g=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/mitchell/party-q/frontend/src/hooks/useInput.js"],"names":["useEffect","useState","useInput","initialValue","type","value","setValue","regex","setRegex","reset","bind","onChange","e","target","console","log","test"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,YAAD,EAAeC,IAAf,KAAwB;AAAA;;AAEvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACE,YAAD,CAAlC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,EAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGI,IAAI,IAAIA,IAAI,KAAK,QAApB,EAA8B;AAC1BI,MAAAA,QAAQ,CAAC,YAAD,CAAR;AACH;AACJ,GAJQ,EAIN,CAACJ,IAAD,CAJM,CAAT;AAOA,SAAO;AACLC,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLG,IAAAA,KAAK,EAAE,MAAMH,QAAQ,CAAC,EAAD,CAHhB;AAILI,IAAAA,IAAI,EAAE;AACJL,MAAAA,KADI;AAEJM,MAAAA,QAAQ,EAAEC,CAAC,IAAI;AACb,cAAM;AAAEP,UAAAA;AAAF,YAAYO,CAAC,CAACC,MAAF,CAASR,KAA3B;AAEAS,QAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;;AAEA,YAAIA,KAAK,KAAK,EAAV,IAAgB,CAACE,KAAjB,IAA0BA,KAAK,CAACS,IAAN,CAAWX,KAAX,CAA9B,EAAiD;AAC7CC,UAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AACF;AAVG;AAJD,GAAP;AAiBD,CA7BD;;GAAMH,Q;;AA+BN,eAAeA,QAAf","sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nconst useInput = (initialValue, type) => {\n\n  const [value, setValue] = useState(initialValue);\n  const [regex, setRegex] = useState();\n\n  useEffect(() => {\n      if(type && type === \"number\") {\n          setRegex(/^[0-9\\b]+$/);\n      }\n  }, [type]);\n\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: e => {\n        const { value } = e.target.value;\n\n        console.log(value)\n\n        if (value === '' || !regex || regex.test(value)) {\n            setValue(value);\n        }\n      }\n    }\n  };\n};\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}